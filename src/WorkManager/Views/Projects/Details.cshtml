@model WorkManager.Models.ProjectsViewModels.DetailsViewModel
@using WorkManager.Models.Norms

@{
    ViewData["Title"] = Model.Title;
}

<h2>Details</h2>

<div>
    <div class="jumbotron">
        <h1>@Html.DisplayFor(model => model.Title)</h1>
        <div class="lead row">
            <div id="is-running" class="alert alert-success" style="display:none" role="alert">
                <span class="h3 today-duration"></span>
                @if (Model.Norm.Type == NormType.Day)
                {
                    <span class="h3">/ @Model.Norm.Goal</span>
                }
            </div>
            <div id="not-running" class="alert alert-danger" style="display:none" role="alert">
                <span class="h3 today-duration"></span>
                @if (Model.Norm.Type == NormType.Day)
                {
                    <span class="h3">/ @Model.Norm.Goal</span>
                }
            </div>
            <div id="today-norm-excecuted" role="button" data-toggle="tooltip" title="Norm is done today" class="alert alert-success" style="display:none">&#x2714;</div>
            <div id="today-norm-not-excecuted" role="button" data-toggle="tooltip" title="Norm isn't done today" class="alert alert-danger" style="display:none">&#xD7;</div>
        </div>
        <p class="lead">@Html.DisplayFor(model => model.Description)</p>
        <hr />
        <button class="btn btn-primary btn-lg" 
                href="#" 
                role="button"
                id="start-btn">Start</button>
        <button class="btn btn-primary btn-lg" 
                href="#" 
                role="button"
                id="stop-btn">Stop</button>
        <hr />
        <div id="calendar"></div>
    </div>
</div>
<div>
    <a asp-action="List">Back to List</a>
</div>

@section scripts
{
    <script src="~/lib/moment/moment.js"></script>
    <script src="~/lib/moment-duration-format/lib/moment-duration-format.js"></script>

    <script>
        var autoUpdateVar;

        $('#start-btn').click(function () {
            $.get('@Url.Action("start", "timers", new { projectId = Model.Id })')
                .done(function(){
                    synchTodayStatistic(rerenderTodayStatistic);
                    autoUpdateVar = startAutoUpdate();
                });
        });

        $('#stop-btn').click(function () {
            $.get('@Url.Action("stop", "timers", new { projectId = Model.Id })')
                .done(function(){
                    synchTodayStatistic(rerenderTodayStatistic);
                    stopAutoUpdate(autoUpdateVar);
                });
        });

        var todayStatistics = { duration: moment.duration(0), isRunning:false };
        var lastSync;
        var syncPeriod = moment.duration(20000);
        var timerPeriod = moment.duration(1000);

        @*Synch today statistic with server*@
        function synchTodayStatistic(callback){
            lastSync = moment();
            $.get({
                url: '@Url.Action("TodayStatistics", "Timers", new { projectId = Model.Id })',
                success: function (data) {
                    todayStatistics.duration = moment.duration(data.duration);
                    todayStatistics.isRunning = data.isRunning;
                    @*Norm*@
                    todayStatistics.progress = data.progress;
                    todayStatistics.progress.excecuted = moment.duration(data.progress.excecuted);
                    todayStatistics.progress.goal = moment.duration(data.progress.goal);

                    callback();
                }
            });
        }

        function rerenderTodayStatistic(){
            $('.today-duration').html(todayStatistics.duration.format("hh:mm:ss", { trim : false }));
            $('#is-running').css('display', todayStatistics.isRunning ? 'inline' : 'none');
            $('#not-running').css('display', todayStatistics.isRunning ? 'none' : 'inline');
            if (todayStatistics.progress.norm.type == @((int)NormType.Day )) {
                $('#today-norm-excecuted').css('display', todayStatistics.progress.isCompleted ? 'inline' : 'none');
                $('#today-norm-not-excecuted').css('display', !todayStatistics.progress.isCompleted ? 'inline' : 'none');
            }
        }

        @*Decide sync with server or just add time to duration and do it*@
        @*sync - force synchroniztion with server*@
        function updateTodayStatistic(sync){
            todayStatistics.duration.add(timerPeriod);
            rerenderTodayStatistic();
            @*if needed synch with server and rerender after success*@
            if (sync || !lastSync || (moment() - lastSync > syncPeriod))
                synchTodayStatistic(rerenderTodayStatistic);
        }

        function startAutoUpdate() {
            updateTodayStatistic();
            return window.setInterval(updateTodayStatistic, timerPeriod);
        }

        function stopAutoUpdate(x) {
            clearInterval(x);
        }

        @*When document is ready
            1. Sync today statistic with server.
            2. When success, rerender
            3. if timer on server is already running, start autoupdate*@
        $(document).ready(function(){
            synchTodayStatistic(function(){
                rerenderTodayStatistic();
                if (todayStatistics.isRunning)
                    autoUpdateVar = startAutoUpdate();
            });
        });
    </script>

    <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.0/themes/smoothness/jquery-ui.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.0/jquery-ui.min.js"></script>
    <link href="//cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.0.0/fullcalendar.min.css" rel="stylesheet" />
    <script src="//cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.0.0/fullcalendar.min.js" type="text/javascript"></script>
    <link media="print" href="//cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.0.0/fullcalendar.print.css" rel="stylesheet" />

    <script>
        $(document).ready(function () {
            $('#calendar').fullCalendar({
                header: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'month,agendaWeek,agendaDay'
                },
                timeFormat: 'HH:mm',
                firstDay: @((int)Model.GetCulture().DateTimeFormat.FirstDayOfWeek),
                events: function (start, end, timezone, callback) {
                    $.get('@Url.Action("Statistics", "Timers", new { projectId = Model.Id })',
                        {
                            start: this.start,
                            end: this.end,
                            groupBy: 'day'
                        },
                        function (res) {
                            var events = [];
                            res.forEach(function (day) {
                                // Duration event (allDay event which shows common duration of timers for day) 
                                events.push({
                                    title: "",
                                    start: day.date,
                                    duration: day.duration,
                                    allDay: true,
                                    backgroundColor: "#04B45F",
                                    borderColor: "#04B45F"
                                });
                                day.childs.forEach(function (timer) {
                                    events.push({
                                        title: "",
                                        start: timer.started,
                                        end: timer.stopped,
                                    });
                                });
                            });
                            callback(events);
                        },
                        'json');
                },
                eventRender: function (event, element, view) {
                    if (event.duration) {
                        var cont = element.find(".fc-content");
                        cont.html(moment.duration(event.duration).format(view.options.timeFormat, {trim: false}));
                    }
                },
                views: {
                    month: {
                        eventLimit: 5
                    }
                }
            })
        });
    </script>
}
